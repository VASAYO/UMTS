% function Sn = Generate_Scrambling_Code(n) 
% % Функция генерирует скремблирующую последовательность по заданному номеру. 
% % 
% % Входные переменные: 
% %   n - номер скремблирующей последовательности, n = 0, ..., 511. 
% % 
% % Выходные переменные: 
% %   Sn – массив-строка длиной 38400 элементов, содержащая комплексные 
% %        значения скремблирующей последовательности. 
% n = 1;
% 
% % x, y sequences
%     x = zeros(1, 2^18-20+18 +1);
%     y = zeros(1, 2^18-20+18 +1);
%     x(0 +1) = 1;
%     y((0:17) +1) = 1;
%     
%     for i = 0:2^18-20
%         x(i + 18 +1) = mod(x(i + 7 +1) + x(i +1), 2);
%         y(i + 18 +1) = mod(sum(y(i + [10,7,5,0] +1)), 2);
%     end
% 
% % z, Z sequence
%     z = mod(circshift(x, n) + y, 2);

function Sn = Generate_Scrambling_Code(n)
% Функция генерирует скремблирующую последовательность по заданному номеру.
%
% Входные переменные:
% n - номер скремблирующей последовательности, n = 0, ..., 511.
%
% Выходные переменные:
% Sn – массив-строка длиной 38400 элементов, содержащая комплексные
% значения скремблирующей последовательности.

% Порождающие вещественные последовательности x и y
    x = zeros(1, 2^18 - 20 + 18 +1);
    y = zeros(size(x));
    x(0 +1) = 1; % x(0)
    y((0:17) +1) = 1;

% Рекурсивное определение последовательностей
    for i = 0 : 2^18 - 20
        x(i + 18 +1) = mod(x(i + 7 +1) + x(i +1),2);
        y(i + 18 +1) = mod(y(i + 10 +1) + y(i + 7 +1) + y(i + 5 +1) + y(i +1), 2);
    end

% Последовательность Zn
    z_n = zeros(1, 2^18 - 1);
    z_n = mod(circshift(x, -16*n) + y, 2);
    Zn = -2*z_n + 1;

%  Последовательность комплексного скремблирующего кода Sn
    for i = 0:38400 - 1
        Sn(i +1) = Zn(i +1) + 1j * Zn(mod(i + 131072 +1, 2^18 - 1));
    end
